import { ChartThemeDefinition } from '../ChartTheme/ChartTheme';
/**
 * Apply custom properties to base and color themes
 * @deprecated Use mergeTheme
 * @public
 */
export declare const getCustomTheme: (themeColor: string, themeVariant: string, customTheme: ChartThemeDefinition) => ChartThemeDefinition;
/**
 * Merge custom properties with base and color themes
 * @param themeColor The theme color to merge with custom theme
 * @param customTheme The custom theme to merge
 * @public
 */
export declare const mergeTheme: (themeColor: string, customTheme: ChartThemeDefinition) => ChartThemeDefinition;
/**
 * Returns axis theme
 * @private
 */
export declare const getAxisTheme: (themeColor: string) => ChartThemeDefinition;
/**
 * Returns bullet chart theme
 * @private
 */
export declare const getBulletTheme: (themeColor: string) => ChartThemeDefinition;
/**
 * Returns comparative error measure theme for bullet chart
 * @private
 */
export declare const getBulletComparativeErrorMeasureTheme: (themeColor: string) => ChartThemeDefinition;
/**
 * Returns comparative measure theme for bullet chart
 * @private
 */
export declare const getBulletComparativeMeasureTheme: (themeColor: string) => ChartThemeDefinition;
/**
 * Returns comparative warning measure theme for bullet chart
 * @private
 */
export declare const getBulletComparativeWarningMeasureTheme: (themeColor: string) => ChartThemeDefinition;
/**
 * Returns group title theme for bullet chart
 * @private
 */
export declare const getBulletGroupTitleTheme: (themeColor: string) => ChartThemeDefinition;
/**
 * Returns primary dot measure theme for bullet chart
 * @private
 */
export declare const getBulletPrimaryDotMeasureTheme: (themeColor: string) => ChartThemeDefinition;
/**
 * Returns primary negative measure theme for bullet chart
 * @private
 */
export declare const getBulletPrimaryNegativeMeasureTheme: (themeColor: string) => ChartThemeDefinition;
/**
 * Returns primary segmented measure theme for bullet chart
 * @private
 */
export declare const getBulletPrimarySegmentedMeasureTheme: (themeColor: string) => ChartThemeDefinition;
/**
 * Returns qualitative range theme for bullet chart
 * @private
 */
export declare const getBulletQualitativeRangeTheme: (themeColor: string) => ChartThemeDefinition;
/**
 * Returns theme for Chart component
 * @private
 */
export declare const getChartTheme: (themeColor: string, showAxis: boolean) => ChartThemeDefinition;
/**
 * Returns donut theme
 * @private
 */
export declare const getDonutTheme: (themeColor: string) => ChartThemeDefinition;
/**
 * Returns dynamic donut threshold theme
 * @private
 */
export declare const getDonutThresholdDynamicTheme: (themeColor: string) => ChartThemeDefinition;
/**
 * Returns static donut threshold theme
 * @private
 */
export declare const getDonutThresholdStaticTheme: (themeColor: string, invert?: boolean) => ChartThemeDefinition;
/**
 * Returns donut utilization theme
 * @private
 */
export declare const getDonutUtilizationTheme: (themeColor: string) => ChartThemeDefinition;
/**
 * Returns theme colors
 * @private
 */
export declare const getThemeColors: (themeColor: string) => {
    area: {
        colorScale: string[];
        style: {
            data: {
                fill: string;
            };
        };
    };
    axis: {
        colorScale: string[];
    };
    bar: {
        colorScale: string[];
        style: {
            data: {
                fill: string;
            };
        };
    };
    boxplot: {
        colorScale: string[];
    };
    candlestick: {
        colorScale: string[];
    };
    chart: {
        colorScale: string[];
    };
    errorbar: {
        colorScale: string[];
    };
    group: {
        colorScale: string[];
    };
    legend: {
        colorScale: string[];
    };
    line: {
        colorScale: string[];
        style: {
            data: {
                stroke: string;
            };
        };
    };
    pie: {
        colorScale: string[];
    };
    scatter: {
        colorScale: string[];
    };
    stack: {
        colorScale: string[];
    };
    voronoi: {
        colorScale: string[];
    };
};
/**
 * Applies theme color to base theme
 * @private
 */
export declare const getTheme: (themeColor: string) => ChartThemeDefinition;
/**
 * Returns threshold theme
 * @private
 */
export declare const getThresholdTheme: (themeColor: string) => ChartThemeDefinition;
//# sourceMappingURL=chart-theme.d.ts.map