import { __rest } from "tslib";
import * as React from 'react';
import hoistNonReactStatics from 'hoist-non-react-statics';
import { VictoryAxis } from 'victory-axis';
import { ChartContainer } from '../ChartContainer';
import { getAxisTheme, getTheme } from '../ChartUtils';
import { ChartLabel } from '../ChartLabel';
export const ChartAxis = (_a) => {
    var { containerComponent = React.createElement(ChartContainer, null), name, showGrid = false, themeColor, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    themeVariant, tickLabelComponent = React.createElement(ChartLabel, null), 
    // destructure last
    theme = getTheme(themeColor) } = _a, rest = __rest(_a, ["containerComponent", "name", "showGrid", "themeColor", "themeVariant", "tickLabelComponent", "theme"]);
    // Clone so users can override container props
    const container = React.cloneElement(containerComponent, Object.assign({ theme }, containerComponent.props));
    const getTickLabelComponent = () => React.cloneElement(tickLabelComponent, Object.assign(Object.assign({}, (name && {
        id: (props) => `${name}-${tickLabelComponent.type.displayName}-${props.index}`
    })), tickLabelComponent.props));
    // Note: containerComponent is required for theme
    return (React.createElement(VictoryAxis, Object.assign({ containerComponent: container, theme: showGrid ? getAxisTheme(themeColor) : theme, tickLabelComponent: getTickLabelComponent() }, rest)));
};
ChartAxis.displayName = 'ChartAxis';
hoistNonReactStatics(ChartAxis, VictoryAxis);
//# sourceMappingURL=ChartAxis.js.map